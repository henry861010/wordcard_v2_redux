{"ast":null,"code":"var _jsxFileName = \"/home/henry/reactjs/wordcard_v2_redux/src/features/words/addWord.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectorType1, selectorType2 } from \"../type/typeSlice\";\nimport { selectorWords, addNewWord } from \"./wordsSlice\";\nimport AddDescription from \"./addDescription\";\nimport { useNavigate } from \"react-router-dom\";\nimport OpenAI from 'openai';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddWord = () => {\n  _s();\n  const _type1 = useSelector(selectorType1);\n  const _type2 = useSelector(selectorType2);\n  const words = useSelector(selectorWords);\n  const [name, setName] = useState(\"\");\n  const [pronounce, setPronounce] = useState(\"\");\n  const [descriptions, setDescriptions] = useState([]);\n  const [type1, setType1] = useState(_type1.map(item => false));\n  const [type2, setType2] = useState(_type2.map(item => false));\n  const [ifVaildName, setifVaildName] = useState(true);\n  const [ifVaildType1, setifVaildType1] = useState(false);\n  const [ifVaildType2, setifVaildType2] = useState(false);\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n\n  //const openai = new OpenAI({apiKey: process.env.OPENAI_API_KEY, dangerouslyAllowBrowser: true });\n\n  const openai = new OpenAI({\n    apiKey: \"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\",\n    dangerouslyAllowBrowser: true\n  });\n  const askChatgpt = async () => {\n    console.log(\"begin\");\n    const responseJSON = await openai.chat.completions.create({\n      model: \"gpt-3.5-turbo\",\n      messages: [{\n        \"role\": \"system\",\n        \"content\": \"You are a helpful assistant.\"\n      }, {\n        \"role\": \"user\",\n        \"content\": `word=${name}. response in json without any other comment, it is an array of object named descriptions. each description presents the different meaning of the given word. description defined as {[meaning]: meaning of the word,[type1]: type of the word,[examples]: [example1, example2,...]}. fill the answer as much as possible and each description has 3 examples and ecah example as long as possible`\n      }]\n    });\n    console.log(\"get the result\");\n    const response = JSON.parse(responseJSON.choices[0].message.content);\n    setDescriptions(...descriptions, response.description.map(item => item));\n    response.description.forEach((description, indexDescription) => {\n      console.log(\"meaning: \" + description.meaning);\n      console.log(\"type: \" + description.type);\n      description.examples.forEach((example, indexExample) => {\n        console.log(\"example-\" + indexExample + \": \" + example);\n      });\n      console.log(\"----------------------------------------\");\n    });\n  };\n  const emptyDescription = {\n    meaning: \"\",\n    type1: \"\",\n    examples: []\n  };\n  const changeName = e => {\n    setName(e.target.value);\n    if (words.filter(item => item.name === e.target.value).length) setifVaildName(false);else setifVaildName(true);\n  };\n  const changeType1 = e => {\n    const newType1 = type1.map((item, index) => e.target.value === String(index) ? e.target.checked : item);\n    setType1(newType1);\n    if (!newType1.filter(item => item).length) setifVaildType1(false);else setifVaildType1(true);\n  };\n  const changeType2 = e => {\n    const newType2 = type2.map((item, index) => e.target.value === String(index) ? e.target.checked : item);\n    setType2(newType2);\n    if (!newType2.filter(item => item).length) setifVaildType2(false);else setifVaildType2(true);\n  };\n  const add = () => {\n    if (ifVaildName && ifVaildType1 && ifVaildType2) {\n      const editedWord = {\n        name,\n        pronounce,\n        descriptions,\n        type1,\n        type2\n      };\n      dispatch(addNewWord(editedWord));\n      navigate(`/`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"addWord-name\",\n      children: \"name: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"addWord-name\",\n      type: \"text\",\n      value: name,\n      placeholder: \"what's the word?\",\n      onChange: changeName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"warning\",\n      children: ifVaildName ? \"\" : \"same word already!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 79\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"addWord-pronounce\",\n      children: \"pronounce:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"addWord-pronounce\",\n      type: \"text\",\n      value: pronounce,\n      placeholder: \"what's the pronounce of word?\",\n      onChange: e => {\n        setPronounce(e.target.value);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 15\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      id: \"addWord-descriptions\",\n      children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n        children: descriptions.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            border: '2px solid black'\n          },\n          children: /*#__PURE__*/_jsxDEV(AddDescription, {\n            id: index,\n            descriptions: descriptions,\n            setDescriptions: setDescriptions\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 29\n          }, this)\n        }, `addWord-description-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setDescriptions([...descriptions, emptyDescription]),\n        children: \"Add Description\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"type1: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"warning\",\n      children: ifVaildType1 ? \"\" : \"at least one type!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 92\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"addWord-type1\",\n      children: _type1.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `addWord-type1${item.type}`,\n          children: item.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: `addWord-type1${item.type}`,\n          type: \"checkbox\",\n          value: index,\n          checked: type1[index],\n          onClick: changeType1,\n          onChange: e => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 25\n        }, this), \" \"]\n      }, `addWord-type1${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"type2: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"warning\",\n      children: ifVaildType2 ? \"\" : \"at least one type!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 92\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      id: \"addWord-type2\",\n      children: _type2.map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: `addWord-type2${item.type}`,\n          children: item.type\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          id: `addWord-type2${item.type}`,\n          type: \"checkbox\",\n          value: index,\n          checked: type2[index],\n          onClick: changeType2,\n          onChange: e => {}\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 25\n        }, this), \" \"]\n      }, `addWord-type2${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"askChatgpt\",\n      onClick: askChatgpt,\n      children: \"ask chatgpt\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"addWord-button\",\n      onClick: add,\n      children: \"ADD WORD!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 9\n  }, this);\n};\n_s(AddWord, \"TWAzUetbBOa3V0Cva/xl4jIZFq8=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch, useNavigate];\n});\n_c = AddWord;\nexport default AddWord;\nvar _c;\n$RefreshReg$(_c, \"AddWord\");","map":{"version":3,"names":["useState","useSelector","useDispatch","selectorType1","selectorType2","selectorWords","addNewWord","AddDescription","useNavigate","OpenAI","jsxDEV","_jsxDEV","AddWord","_s","_type1","_type2","words","name","setName","pronounce","setPronounce","descriptions","setDescriptions","type1","setType1","map","item","type2","setType2","ifVaildName","setifVaildName","ifVaildType1","setifVaildType1","ifVaildType2","setifVaildType2","dispatch","navigate","openai","apiKey","dangerouslyAllowBrowser","askChatgpt","console","log","responseJSON","chat","completions","create","model","messages","response","JSON","parse","choices","message","content","description","forEach","indexDescription","meaning","type","examples","example","indexExample","emptyDescription","changeName","e","target","value","filter","length","changeType1","newType1","index","String","checked","changeType2","newType2","add","editedWord","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","placeholder","onChange","className","style","border","onClick","_c","$RefreshReg$"],"sources":["/home/henry/reactjs/wordcard_v2_redux/src/features/words/addWord.js"],"sourcesContent":["import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectorType1, selectorType2 } from \"../type/typeSlice\";\nimport { selectorWords, addNewWord } from \"./wordsSlice\";\nimport AddDescription from \"./addDescription\";\nimport { useNavigate } from \"react-router-dom\";\nimport OpenAI from 'openai';\n\nconst AddWord = () => {\n    const _type1 = useSelector(selectorType1);\n    const _type2 = useSelector(selectorType2);\n    const words = useSelector(selectorWords);\n\n    const [ name, setName ] = useState(\"\");\n    const [ pronounce, setPronounce ] = useState(\"\");\n    const [ descriptions, setDescriptions ] = useState([]);\n    const [ type1, setType1 ] = useState(_type1.map(item=>false));\n    const [ type2, setType2 ] = useState(_type2.map(item=>false));\n    const [ ifVaildName, setifVaildName ] = useState(true);\n    const [ ifVaildType1, setifVaildType1 ] = useState(false);\n    const [ ifVaildType2, setifVaildType2 ] = useState(false);\n\n    const dispatch = useDispatch();\n    const navigate = useNavigate();\n\n    //const openai = new OpenAI({apiKey: process.env.OPENAI_API_KEY, dangerouslyAllowBrowser: true });\n    \n    const openai = new OpenAI({apiKey: \"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\", dangerouslyAllowBrowser: true });\n\n    const askChatgpt = async () => {\n    console.log(\"begin\");\n        const responseJSON = await openai.chat.completions.create({\n            model: \"gpt-3.5-turbo\",\n            messages: [{\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n                {\"role\": \"user\", \"content\": `word=${name}. response in json without any other comment, it is an array of object named descriptions. each description presents the different meaning of the given word. description defined as {[meaning]: meaning of the word,[type1]: type of the word,[examples]: [example1, example2,...]}. fill the answer as much as possible and each description has 3 examples and ecah example as long as possible`}],\n        });\n    console.log(\"get the result\");\n        const response = JSON.parse(responseJSON.choices[0].message.content);\n        setDescriptions(...descriptions,response.description.map(item => item))\n        response.description.forEach(( description, indexDescription ) => {\n          console.log(\"meaning: \"+description.meaning);\n          console.log(\"type: \"+description.type);\n          description.examples.forEach(( example , indexExample )=>{\n            console.log(\"example-\"+indexExample+\": \"+example);\n          });\n          console.log(\"----------------------------------------\");\n        });\n      }\n\n    const emptyDescription = {\n        meaning: \"\",\n        type1: \"\",\n        examples: []\n    };\n    const changeName = (e) => {\n        setName(e.target.value)\n\n        if( words.filter( item => item.name===e.target.value ).length ) setifVaildName(false);\n        else setifVaildName(true);\n    }\n\n    const changeType1 = (e) => {\n        const newType1 = type1.map((item, index) => (\n            e.target.value===String(index)?e.target.checked:item\n        ));\n        setType1(newType1);\n\n        if( !newType1.filter( item => item ).length ) setifVaildType1(false);\n        else setifVaildType1(true);\n    }\n\n    const changeType2 = (e) => {\n        const newType2 = type2.map((item, index) => (\n            e.target.value===String(index)?e.target.checked:item\n        ));\n        setType2(newType2);\n\n        if( !newType2.filter( item => item ).length ) setifVaildType2(false);\n        else setifVaildType2(true);\n    }\n\n    const add = () => {\n        if( ifVaildName && ifVaildType1 && ifVaildType2 ) {\n            const editedWord = {\n                name, \n                pronounce, \n                descriptions, \n                type1, \n                type2\n            }\n            dispatch(addNewWord(editedWord));\n            navigate(`/`);\n        }\n    }\n\n    return(\n        <main>\n            {/*add-name*/}\n            <label htmlFor=\"addWord-name\">name: </label>\n            <input \n                id = \"addWord-name\"\n                type = \"text\"\n                value = {name}\n                placeholder=\"what's the word?\"\n                onChange={changeName}\n            /><p className=\"warning\">{ifVaildName?\"\":\"same word already!\"}</p><br/>\n\n            {/*add-pronounce*/}\n            <label htmlFor=\"addWord-pronounce\">pronounce:</label>\n            <input \n                id = \"addWord-pronounce\"\n                type = \"text\"\n                value = {pronounce}\n                placeholder=\"what's the pronounce of word?\"\n                onChange={(e)=>{setPronounce(e.target.value)}}\n            /><br/>\n\n            {/*add-descriptions*/}\n            <section id = \"addWord-descriptions\" >\n                <ul>{\n                    descriptions.map((item, index)=>(\n                        <li key={`addWord-description-${index}`} style={{ border: '2px solid black' }}>\n                            <AddDescription id={index} descriptions={descriptions} setDescriptions={setDescriptions} />\n                        </li>\n                    ))\n                }</ul>\n                <button onClick={() => setDescriptions([...descriptions,emptyDescription])}>Add Description</button>\n            </section>\n\n            {/*add-type1*/}\n            <p>type1: </p><p className=\"warning\">{ifVaildType1?\"\":\"at least one type!\"}</p><br/>\n            <ul id=\"addWord-type1\">{\n                _type1.map((item, index)=>(\n                    <li key={`addWord-type1${index}`}>\n                        <label htmlFor={`addWord-type1${item.type}`}>{item.type}</label>\n                        <input\n                            id={`addWord-type1${item.type}`}\n                            type=\"checkbox\"\n                            value={index}\n                            checked={type1[index]}\n                            onClick={changeType1}\n                            onChange={e => {}}\n                        /> {/*can avoid onChange={e => {}}? https://www.google.com/search?q=The+label%27s+for+attribute+doesn%27t+match+any+element+id.+This+might+prevent+the+browser+from+correctly+autofilling+the+form+and+accessibility+tools+from+working+correctly.+To+fix+this+issue%2C+make+sure+the+label%27s+for+attribute+references+the+correct+id+of+a+form+field.&oq=The+label%27s+for+attribute+doesn%27t+match+any+element+id.+This+might+prevent+the+browser+from+correctly+autofilling+the+form+and+accessibility+tools+from+working+correctly.+To+fix+this+issue%2C+make+sure+the+label%27s+for+attribute+references+the+correct+id+of+a+form+field.&aqs=chrome..69i57.661j0j7&sourceid=chrome&ie=UTF-8 */}\n                    </li>\n                ))\n            }</ul>\n\n            {/*add-type2*/}\n            <p>type2: </p><p className=\"warning\">{ifVaildType2?\"\":\"at least one type!\"}</p><br/>\n            <ul id=\"addWord-type2\">{\n                _type2.map((item, index)=>(\n                    <li key={`addWord-type2${index}`}>\n                        <label htmlFor={`addWord-type2${item.type}`}>{item.type}</label>\n                        <input\n                            id={`addWord-type2${item.type}`}\n                            type=\"checkbox\"\n                            value={index}\n                            checked={type2[index]}\n                            onClick={changeType2}\n                            onChange={e => {}}\n                        /> {/*can avoid onChange={e => {}}? https://www.google.com/search?q=The+label%27s+for+attribute+doesn%27t+match+any+element+id.+This+might+prevent+the+browser+from+correctly+autofilling+the+form+and+accessibility+tools+from+working+correctly.+To+fix+this+issue%2C+make+sure+the+label%27s+for+attribute+references+the+correct+id+of+a+form+field.&oq=The+label%27s+for+attribute+doesn%27t+match+any+element+id.+This+might+prevent+the+browser+from+correctly+autofilling+the+form+and+accessibility+tools+from+working+correctly.+To+fix+this+issue%2C+make+sure+the+label%27s+for+attribute+references+the+correct+id+of+a+form+field.&aqs=chrome..69i57.661j0j7&sourceid=chrome&ie=UTF-8 */}\n                    </li>\n                ))\n            }</ul>\n\n            <button \n                id=\"askChatgpt\"\n                onClick={askChatgpt}\n            >ask chatgpt</button>\n\n            <button \n                id=\"addWord-button\"\n                onClick={add}\n            >ADD WORD!</button>\n\n        </main>\n    );\n}\nexport default AddWord"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,aAAa,EAAEC,aAAa,QAAQ,mBAAmB;AAChE,SAASC,aAAa,EAAEC,UAAU,QAAQ,cAAc;AACxD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,MAAM,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5B,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAClB,MAAMC,MAAM,GAAGb,WAAW,CAACE,aAAa,CAAC;EACzC,MAAMY,MAAM,GAAGd,WAAW,CAACG,aAAa,CAAC;EACzC,MAAMY,KAAK,GAAGf,WAAW,CAACI,aAAa,CAAC;EAExC,MAAM,CAAEY,IAAI,EAAEC,OAAO,CAAE,GAAGlB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAAEmB,SAAS,EAAEC,YAAY,CAAE,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAAEqB,YAAY,EAAEC,eAAe,CAAE,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAEuB,KAAK,EAAEC,QAAQ,CAAE,GAAGxB,QAAQ,CAACc,MAAM,CAACW,GAAG,CAACC,IAAI,IAAE,KAAK,CAAC,CAAC;EAC7D,MAAM,CAAEC,KAAK,EAAEC,QAAQ,CAAE,GAAG5B,QAAQ,CAACe,MAAM,CAACU,GAAG,CAACC,IAAI,IAAE,KAAK,CAAC,CAAC;EAC7D,MAAM,CAAEG,WAAW,EAAEC,cAAc,CAAE,GAAG9B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAE+B,YAAY,EAAEC,eAAe,CAAE,GAAGhC,QAAQ,CAAC,KAAK,CAAC;EACzD,MAAM,CAAEiC,YAAY,EAAEC,eAAe,CAAE,GAAGlC,QAAQ,CAAC,KAAK,CAAC;EAEzD,MAAMmC,QAAQ,GAAGjC,WAAW,CAAC,CAAC;EAC9B,MAAMkC,QAAQ,GAAG5B,WAAW,CAAC,CAAC;;EAE9B;;EAEA,MAAM6B,MAAM,GAAG,IAAI5B,MAAM,CAAC;IAAC6B,MAAM,EAAE,qDAAqD;IAAEC,uBAAuB,EAAE;EAAK,CAAC,CAAC;EAE1H,MAAMC,UAAU,GAAG,MAAAA,CAAA,KAAY;IAC/BC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IAChB,MAAMC,YAAY,GAAG,MAAMN,MAAM,CAACO,IAAI,CAACC,WAAW,CAACC,MAAM,CAAC;MACtDC,KAAK,EAAE,eAAe;MACtBC,QAAQ,EAAE,CAAC;QAAC,MAAM,EAAE,QAAQ;QAAE,SAAS,EAAE;MAA8B,CAAC,EACpE;QAAC,MAAM,EAAE,MAAM;QAAE,SAAS,EAAG,QAAO/B,IAAK;MAAmY,CAAC;IACrb,CAAC,CAAC;IACNwB,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;IACzB,MAAMO,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACR,YAAY,CAACS,OAAO,CAAC,CAAC,CAAC,CAACC,OAAO,CAACC,OAAO,CAAC;IACpEhC,eAAe,CAAC,GAAGD,YAAY,EAAC4B,QAAQ,CAACM,WAAW,CAAC9B,GAAG,CAACC,IAAI,IAAIA,IAAI,CAAC,CAAC;IACvEuB,QAAQ,CAACM,WAAW,CAACC,OAAO,CAAC,CAAED,WAAW,EAAEE,gBAAgB,KAAM;MAChEhB,OAAO,CAACC,GAAG,CAAC,WAAW,GAACa,WAAW,CAACG,OAAO,CAAC;MAC5CjB,OAAO,CAACC,GAAG,CAAC,QAAQ,GAACa,WAAW,CAACI,IAAI,CAAC;MACtCJ,WAAW,CAACK,QAAQ,CAACJ,OAAO,CAAC,CAAEK,OAAO,EAAGC,YAAY,KAAI;QACvDrB,OAAO,CAACC,GAAG,CAAC,UAAU,GAACoB,YAAY,GAAC,IAAI,GAACD,OAAO,CAAC;MACnD,CAAC,CAAC;MACFpB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACzD,CAAC,CAAC;EACJ,CAAC;EAEH,MAAMqB,gBAAgB,GAAG;IACrBL,OAAO,EAAE,EAAE;IACXnC,KAAK,EAAE,EAAE;IACTqC,QAAQ,EAAE;EACd,CAAC;EACD,MAAMI,UAAU,GAAIC,CAAC,IAAK;IACtB/C,OAAO,CAAC+C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;IAEvB,IAAInD,KAAK,CAACoD,MAAM,CAAE1C,IAAI,IAAIA,IAAI,CAACT,IAAI,KAAGgD,CAAC,CAACC,MAAM,CAACC,KAAM,CAAC,CAACE,MAAM,EAAGvC,cAAc,CAAC,KAAK,CAAC,CAAC,KACjFA,cAAc,CAAC,IAAI,CAAC;EAC7B,CAAC;EAED,MAAMwC,WAAW,GAAIL,CAAC,IAAK;IACvB,MAAMM,QAAQ,GAAGhD,KAAK,CAACE,GAAG,CAAC,CAACC,IAAI,EAAE8C,KAAK,KACnCP,CAAC,CAACC,MAAM,CAACC,KAAK,KAAGM,MAAM,CAACD,KAAK,CAAC,GAACP,CAAC,CAACC,MAAM,CAACQ,OAAO,GAAChD,IACnD,CAAC;IACFF,QAAQ,CAAC+C,QAAQ,CAAC;IAElB,IAAI,CAACA,QAAQ,CAACH,MAAM,CAAE1C,IAAI,IAAIA,IAAK,CAAC,CAAC2C,MAAM,EAAGrC,eAAe,CAAC,KAAK,CAAC,CAAC,KAChEA,eAAe,CAAC,IAAI,CAAC;EAC9B,CAAC;EAED,MAAM2C,WAAW,GAAIV,CAAC,IAAK;IACvB,MAAMW,QAAQ,GAAGjD,KAAK,CAACF,GAAG,CAAC,CAACC,IAAI,EAAE8C,KAAK,KACnCP,CAAC,CAACC,MAAM,CAACC,KAAK,KAAGM,MAAM,CAACD,KAAK,CAAC,GAACP,CAAC,CAACC,MAAM,CAACQ,OAAO,GAAChD,IACnD,CAAC;IACFE,QAAQ,CAACgD,QAAQ,CAAC;IAElB,IAAI,CAACA,QAAQ,CAACR,MAAM,CAAE1C,IAAI,IAAIA,IAAK,CAAC,CAAC2C,MAAM,EAAGnC,eAAe,CAAC,KAAK,CAAC,CAAC,KAChEA,eAAe,CAAC,IAAI,CAAC;EAC9B,CAAC;EAED,MAAM2C,GAAG,GAAGA,CAAA,KAAM;IACd,IAAIhD,WAAW,IAAIE,YAAY,IAAIE,YAAY,EAAG;MAC9C,MAAM6C,UAAU,GAAG;QACf7D,IAAI;QACJE,SAAS;QACTE,YAAY;QACZE,KAAK;QACLI;MACJ,CAAC;MACDQ,QAAQ,CAAC7B,UAAU,CAACwE,UAAU,CAAC,CAAC;MAChC1C,QAAQ,CAAE,GAAE,CAAC;IACjB;EACJ,CAAC;EAED,oBACIzB,OAAA;IAAAoE,QAAA,gBAEIpE,OAAA;MAAOqE,OAAO,EAAC,cAAc;MAAAD,QAAA,EAAC;IAAM;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eAC5CzE,OAAA;MACI0E,EAAE,EAAG,cAAc;MACnB1B,IAAI,EAAG,MAAM;MACbQ,KAAK,EAAIlD,IAAK;MACdqE,WAAW,EAAC,kBAAkB;MAC9BC,QAAQ,EAAEvB;IAAW;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACxB,CAAC,eAAAzE,OAAA;MAAG6E,SAAS,EAAC,SAAS;MAAAT,QAAA,EAAElD,WAAW,GAAC,EAAE,GAAC;IAAoB;MAAAoD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAAAzE,OAAA;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGvEzE,OAAA;MAAOqE,OAAO,EAAC,mBAAmB;MAAAD,QAAA,EAAC;IAAU;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACrDzE,OAAA;MACI0E,EAAE,EAAG,mBAAmB;MACxB1B,IAAI,EAAG,MAAM;MACbQ,KAAK,EAAIhD,SAAU;MACnBmE,WAAW,EAAC,+BAA+B;MAC3CC,QAAQ,EAAGtB,CAAC,IAAG;QAAC7C,YAAY,CAAC6C,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;MAAA;IAAE;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjD,CAAC,eAAAzE,OAAA;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAGPzE,OAAA;MAAS0E,EAAE,EAAG,sBAAsB;MAAAN,QAAA,gBAChCpE,OAAA;QAAAoE,QAAA,EACI1D,YAAY,CAACI,GAAG,CAAC,CAACC,IAAI,EAAE8C,KAAK,kBACzB7D,OAAA;UAAyC8E,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAkB,CAAE;UAAAX,QAAA,eAC1EpE,OAAA,CAACJ,cAAc;YAAC8E,EAAE,EAAEb,KAAM;YAACnD,YAAY,EAAEA,YAAa;YAACC,eAAe,EAAEA;UAAgB;YAAA2D,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE;QAAC,GADrF,uBAAsBZ,KAAM,EAAC;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEnC,CACP;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACD,CAAC,eACNzE,OAAA;QAAQgF,OAAO,EAAEA,CAAA,KAAMrE,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAC0C,gBAAgB,CAAC,CAAE;QAAAgB,QAAA,EAAC;MAAe;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/F,CAAC,eAGVzE,OAAA;MAAAoE,QAAA,EAAG;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAAAzE,OAAA;MAAG6E,SAAS,EAAC,SAAS;MAAAT,QAAA,EAAEhD,YAAY,GAAC,EAAE,GAAC;IAAoB;MAAAkD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAAAzE,OAAA;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpFzE,OAAA;MAAI0E,EAAE,EAAC,eAAe;MAAAN,QAAA,EAClBjE,MAAM,CAACW,GAAG,CAAC,CAACC,IAAI,EAAE8C,KAAK,kBACnB7D,OAAA;QAAAoE,QAAA,gBACIpE,OAAA;UAAOqE,OAAO,EAAG,gBAAetD,IAAI,CAACiC,IAAK,EAAE;UAAAoB,QAAA,EAAErD,IAAI,CAACiC;QAAI;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChEzE,OAAA;UACI0E,EAAE,EAAG,gBAAe3D,IAAI,CAACiC,IAAK,EAAE;UAChCA,IAAI,EAAC,UAAU;UACfQ,KAAK,EAAEK,KAAM;UACbE,OAAO,EAAEnD,KAAK,CAACiD,KAAK,CAAE;UACtBmB,OAAO,EAAErB,WAAY;UACrBiB,QAAQ,EAAEtB,CAAC,IAAI,CAAC;QAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,KAAC;MAAA,GATG,gBAAeZ,KAAM,EAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAU5B,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAGNzE,OAAA;MAAAoE,QAAA,EAAG;IAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eAAAzE,OAAA;MAAG6E,SAAS,EAAC,SAAS;MAAAT,QAAA,EAAE9C,YAAY,GAAC,EAAE,GAAC;IAAoB;MAAAgD,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAAAzE,OAAA;MAAAsE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACpFzE,OAAA;MAAI0E,EAAE,EAAC,eAAe;MAAAN,QAAA,EAClBhE,MAAM,CAACU,GAAG,CAAC,CAACC,IAAI,EAAE8C,KAAK,kBACnB7D,OAAA;QAAAoE,QAAA,gBACIpE,OAAA;UAAOqE,OAAO,EAAG,gBAAetD,IAAI,CAACiC,IAAK,EAAE;UAAAoB,QAAA,EAAErD,IAAI,CAACiC;QAAI;UAAAsB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAChEzE,OAAA;UACI0E,EAAE,EAAG,gBAAe3D,IAAI,CAACiC,IAAK,EAAE;UAChCA,IAAI,EAAC,UAAU;UACfQ,KAAK,EAAEK,KAAM;UACbE,OAAO,EAAE/C,KAAK,CAAC6C,KAAK,CAAE;UACtBmB,OAAO,EAAEhB,WAAY;UACrBY,QAAQ,EAAEtB,CAAC,IAAI,CAAC;QAAE;UAAAgB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrB,CAAC,KAAC;MAAA,GATG,gBAAeZ,KAAM,EAAC;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAU5B,CACP;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eAENzE,OAAA;MACI0E,EAAE,EAAC,YAAY;MACfM,OAAO,EAAEnD,UAAW;MAAAuC,QAAA,EACvB;IAAW;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAErBzE,OAAA;MACI0E,EAAE,EAAC,gBAAgB;MACnBM,OAAO,EAAEd,GAAI;MAAAE,QAAA,EAChB;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEjB,CAAC;AAEf,CAAC;AAAAvE,EAAA,CAzKKD,OAAO;EAAA,QACMX,WAAW,EACXA,WAAW,EACZA,WAAW,EAWRC,WAAW,EACXM,WAAW;AAAA;AAAAoF,EAAA,GAf1BhF,OAAO;AA0Kb,eAAeA,OAAO;AAAA,IAAAgF,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}