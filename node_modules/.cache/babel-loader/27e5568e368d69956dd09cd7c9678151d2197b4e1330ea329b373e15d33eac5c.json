{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initWords = [{\n  id: 0,\n  name: \"apple\",\n  pronounce: \"[apple]\",\n  descriptions: [{\n    meaning: \"a fruit\",\n    type1: \"n\",\n    examples: [\"an apple a day, leave doctor away\", \"i like apple\"]\n  }, {\n    meaning: \"red\",\n    type1: \"adj\",\n    examples: [\"she is so apple\", \"apple~~~\"]\n  }],\n  type1: [true, false, false, false],\n  type2: [false, false, false, false]\n}, {\n  id: 1,\n  name: \"apple1\",\n  pronounce: \"[apple]\",\n  descriptions: [{\n    meaning: \"a fruit\",\n    type1: \"n\",\n    examples: [\"an apple a day, leave doctor away\", \"i like apple\"]\n  }, {\n    meaning: \"red\",\n    type1: \"adj\",\n    examples: [\"she is so apple\", \"apple~~~\"]\n  }],\n  type1: [true, false, false, false],\n  type2: [false, false, false, false]\n}, {\n  id: 2,\n  name: \"appl2\",\n  pronounce: \"[apple]\",\n  descriptions: [{\n    meaning: \"a fruit\",\n    type1: \"n\",\n    examples: [\"an apple a day, leave doctor away\", \"i like apple\"]\n  }, {\n    meaning: \"red\",\n    type1: \"adj\",\n    examples: [\"she is so apple\", \"apple~~~\"]\n  }],\n  type1: [true, false, false, false],\n  type2: [false, false, false, false]\n}, {\n  id: 3,\n  name: \"apple3\",\n  pronounce: \"[apple]\",\n  descriptions: [{\n    meaning: \"a fruit\",\n    type1: \"n\",\n    examples: [\"an apple a day, leave doctor away\", \"i like apple\"]\n  }, {\n    meaning: \"red\",\n    type1: \"adj\",\n    examples: [\"she is so apple\", \"apple~~~\"]\n  }],\n  type1: [true, false, false, false],\n  type2: [false, false, false, false]\n}, {\n  id: 4,\n  name: \"apple4\",\n  pronounce: \"[apple]\",\n  descriptions: [{\n    meaning: \"a fruit\",\n    type1: \"n\",\n    examples: [\"an apple a day, leave doctor away\", \"i like apple\"]\n  }, {\n    meaning: \"red\",\n    type1: \"adj\",\n    examples: [\"she is so apple\", \"apple~~~\"]\n  }],\n  type1: [true, false, false, false],\n  type2: [false, false, false, false]\n}, {\n  id: 5,\n  name: \"apple5\",\n  pronounce: \"[apple]\",\n  descriptions: [{\n    meaning: \"a fruit\",\n    type1: \"n\",\n    examples: [\"an apple a day, leave doctor away\", \"i like apple\"]\n  }, {\n    meaning: \"red\",\n    type1: \"adj\",\n    examples: [\"she is so apple\", \"apple~~~\"]\n  }],\n  type1: [true, false, false, false],\n  type2: [false, false, false, false]\n}];\nconst initValue = {\n  words: initWords,\n  status: \"pending\",\n  //pending, fullfilled, error \n  error: null\n};\nconst wordsSlice = createSlice({\n  name: 'words',\n  initValue,\n  reducers: {\n    addWord: {\n      reducer(state, action) {\n        let id = state.words.length;\n        action.payload.id = id;\n        state.words.push(action.payload);\n      },\n      prepare(id, name, pronounce, descriptions, type1, type2) {\n        return {\n          payload: {\n            id: id,\n            name: name,\n            pronounce: pronounce,\n            descriptions: descriptions,\n            type1: type1,\n            type2: type2\n          }\n        };\n      }\n    },\n    editWord: {\n      reducer(state, action) {\n        const id = action.payload.id;\n        const newWord = action.payload;\n        state.words[id] = newWord;\n      },\n      prepare(id, name, pronounce, descriptions, type1, type2) {\n        return {\n          payload: {\n            id: id,\n            name: name,\n            pronounce: pronounce,\n            descriptions: descriptions,\n            type1: type1,\n            type2: type2\n          }\n        };\n      }\n    },\n    deleteWord: {\n      reducer(state, action) {\n        //create new words, beacuse the id of each wor will be redefined\n        const oldWords = state.words;\n        const newWords = oldWords.map(item => item.id === action.id ? null : item).filter(Boolean);\n        state.words = newWords;\n      },\n      prepare(id) {\n        return {\n          payload: {\n            id: id\n          }\n        };\n      }\n    }\n  },\n  extraReduces(build) {\n    build.addCase();\n  }\n});\nexport const {\n  addWord,\n  editWord,\n  deleteWord\n} = wordsSlice.actions;\nexport const selectorWords = state => state.words.words;\nexport const selectorWordByID = (state, id) => state.words.words[id];\nexport const selectorStatus = state => state.words.status;\nexport const selectorsError = state => state.words.error;\nexport default wordsSlice.reducer;","map":{"version":3,"names":["createSlice","initWords","id","name","pronounce","descriptions","meaning","type1","examples","type2","initValue","words","status","error","wordsSlice","reducers","addWord","reducer","state","action","length","payload","push","prepare","editWord","newWord","deleteWord","oldWords","newWords","map","item","filter","Boolean","extraReduces","build","addCase","actions","selectorWords","selectorWordByID","selectorStatus","selectorsError"],"sources":["/home/henry/reactjs/wordcard_v2_redux/src/features/words/wordsSlice.js"],"sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initWords = [\n        {\n            id: 0,\n            name: \"apple\",\n            pronounce: \"[apple]\",\n            descriptions: [\n                {\n                    meaning: \"a fruit\",\n                    type1: \"n\",\n                    examples: [\"an apple a day, leave doctor away\",\"i like apple\"]\n                },\n                {\n                    meaning: \"red\",\n                    type1: \"adj\",\n                    examples: [\"she is so apple\",\"apple~~~\"]\n                }\n            ],\n            type1:[true, false, false, false],\n            type2:[false, false, false, false],\n        },\n        {\n            id: 1,\n            name: \"apple1\",\n            pronounce: \"[apple]\",\n            descriptions: [\n                {\n                    meaning: \"a fruit\",\n                    type1: \"n\",\n                    examples: [\"an apple a day, leave doctor away\",\"i like apple\"]\n                },\n                {\n                    meaning: \"red\",\n                    type1: \"adj\",\n                    examples: [\"she is so apple\",\"apple~~~\"]\n                }\n            ],\n            type1:[true, false, false, false],\n            type2:[false, false, false, false],\n        },\n        {\n            id: 2,\n            name: \"appl2\",\n            pronounce: \"[apple]\",\n            descriptions: [\n                {\n                    meaning: \"a fruit\",\n                    type1: \"n\",\n                    examples: [\"an apple a day, leave doctor away\",\"i like apple\"]\n                },\n                {\n                    meaning: \"red\",\n                    type1: \"adj\",\n                    examples: [\"she is so apple\",\"apple~~~\"]\n                }\n            ],\n            type1:[true, false, false, false],\n            type2:[false, false, false, false],\n        },\n        {\n            id: 3,\n            name: \"apple3\",\n            pronounce: \"[apple]\",\n            descriptions: [\n                {\n                    meaning: \"a fruit\",\n                    type1: \"n\",\n                    examples: [\"an apple a day, leave doctor away\",\"i like apple\"]\n                },\n                {\n                    meaning: \"red\",\n                    type1: \"adj\",\n                    examples: [\"she is so apple\",\"apple~~~\"]\n                }\n            ],\n            type1:[true, false, false, false],\n            type2:[false, false, false, false],\n        },\n        {\n            id: 4,\n            name: \"apple4\",\n            pronounce: \"[apple]\",\n            descriptions: [\n                {\n                    meaning: \"a fruit\",\n                    type1: \"n\",\n                    examples: [\"an apple a day, leave doctor away\",\"i like apple\"]\n                },\n                {\n                    meaning: \"red\",\n                    type1: \"adj\",\n                    examples: [\"she is so apple\",\"apple~~~\"]\n                }\n            ],\n            type1:[true, false, false, false],\n            type2:[false, false, false, false],\n        },\n        {\n            id: 5,\n            name: \"apple5\",\n            pronounce: \"[apple]\",\n            descriptions: [\n                {\n                    meaning: \"a fruit\",\n                    type1: \"n\",\n                    examples: [\"an apple a day, leave doctor away\",\"i like apple\"]\n                },\n                {\n                    meaning: \"red\",\n                    type1: \"adj\",\n                    examples: [\"she is so apple\",\"apple~~~\"]\n                }\n            ],\n            type1:[true, false, false, false],\n            type2:[false, false, false, false],\n        }\n];\nconst initValue = {\n    words: initWords,\n    status: \"pending\",  //pending, fullfilled, error \n    error: null\n};\n\nconst wordsSlice = createSlice({\n    name: 'words',\n    initValue,\n    reducers:{\n        addWord: {\n            reducer(state, action){\n                let id = state.words.length;\n                action.payload.id = id;\n                state.words.push(action.payload);\n            },\n            prepare( id, name, pronounce, descriptions, type1, type2){\n                return{\n                    payload:{\n                        id: id,\n                        name: name,\n                        pronounce: pronounce,\n                        descriptions: descriptions,\n                        type1:type1,\n                        type2:type2,\n                    }\n                }\n            }\n        },\n        editWord: {\n            reducer(state, action){\n                const id = action.payload.id;\n                const newWord = action.payload;\n                state.words[id] = newWord;\n            },\n            prepare(id, name, pronounce, descriptions, type1, type2){\n                return{\n                    payload:{\n                        id: id,\n                        name: name,\n                        pronounce: pronounce,\n                        descriptions: descriptions,\n                        type1:type1,\n                        type2:type2,\n                    }\n                }\n            }\n        },\n        deleteWord: {\n            reducer(state, action){\n                //create new words, beacuse the id of each wor will be redefined\n                const oldWords = state.words;\n                const newWords = oldWords.map((item)=>(item.id===action.id?null:item)).filter(Boolean);\n                state.words = newWords;\n            },\n            prepare(id){\n                return{\n                    payload:{\n                        id: id\n                    }\n                }\n            }\n        }\n    },\n    extraReduces(build){\n        build\n            .addCase()\n    }\n});\n\nexport const {addWord, editWord, deleteWord} = wordsSlice.actions;\nexport const selectorWords = (state) => (state.words.words);\nexport const selectorWordByID = (state, id) => (state.words.words[id]);\nexport const selectorStatus = (state) => (state.words.status);\nexport const selectorsError = (state) => (state.words.error);\nexport default wordsSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}